---
title: "ATLAS farmacia: Variaciones en el consumo y gasto de fármacos opioides por zona básica de salud en el Sistema Nacional de Salud"
lang: es
author:
  - name: Atlas de variaciones injustificadas de la práctica médica (Atlas VPM)
    affiliations:
      - name: Grupo de Ciencia de datos para la investigación en servicios y políticas sanitarias
      - name: Instituto Aragonés de Ciencias de la Salud (IACS)
      - name: Instituto de Investigación Sanitaria de Aragón (IIS)
      - name: Red de Investigación en Cronicidad, Atención Primaria y Prevención y Promoción de la Salud (RICAPPS)
#date: 
bibliography:
  - referencias.bib
format: 
  html:
    embed-resources: true
    toc: true
    toc-depth: 4
    highlight-style: pygments
    code-fold: true
    html-math-method: katex
    # grid:
    #   body-width: 1100px
echo: false
message: false
warning: false
error: false
---

```{css, echo = FALSE}
.justify {
  text-align: justify !important
}
```

```{r}
#| label: cargar paquetes

library(ggplot2)
library(dplyr)
library(sf)
library(Hmisc) 
library(sjmisc)
library(DBI)
library(gt)
library(logger)
library(epoxy)
library(cowplot)
library(plotly)
library(ggalluvial)
library(ggrepel)
library(scales)
library(purrr)
library(stringr)

options(scipen = 999)

s <- Sys.getenv("PIPELINE_VERSION")

log_info(paste0("Versión de los análisis: ",s))

```

<p> Versión de los análisis: `r paste0(s)` </p>


```{r, output = FALSE}
#| label: tabla nomenclator y poblacion 


database_path <- '../../inputs/data.duckdb'

con = dbConnect(duckdb::duckdb(), dbdir=database_path, read_only=FALSE)

log_info('Cargando nomenclator común')

nomenclator_df <- read.csv(file = 'nomenclator_opioides.csv', sep = '|')

dbExecute(con, "CREATE OR REPLACE TABLE nomenclator (
            codigo_nacional_farmaco_cd VARCHAR,
            codigo_descripcion VARCHAR,
          	atc_farmaco_dispensado_cd VARCHAR,
          	ddd_nomenclator_nm DOUBLE,
          	ddd_por_envase DOUBLE,
          	pvp_nomenclator_nm DOUBLE,
          	precio_por_envase_nm DOUBLE,
            mme_total DOUBLE);")

dbWriteTable(con, "nomenclator", nomenclator_df, append = TRUE)


log_info('Cargando poblaciones')

poblaciones_ine_df <- read.csv(file = 'datos_nivel_zona_basica_ine.csv', sep = '|')

dbExecute(con, "CREATE OR REPLACE TABLE zona_basica_ine (
            año_cd VARCHAR,
          	ccaa_cd VARCHAR,
          	codatzbs VARCHAR,
          	sexo_cd BIGINT,
          	grupo_edad_cd BIGINT,
          	n_poblacion BIGINT);")

dbWriteTable(con, "zona_basica_ine", poblaciones_ine_df, append = TRUE)

# poblaciones_tarjeta_df <- read.csv(file = 'datos_nivel_zona_basica_tarjeta.csv', sep = '|', colClasses = c(zbs_residencia_cd = 'character'))
poblaciones_tarjeta_df <- dbGetQuery(conn = con, "
   SELECT * FROM 'datos_nivel_zona_basica_tarjeta.parquet'
	")

dbExecute(con, "CREATE OR REPLACE TABLE zona_basica_tarjeta (
            año_cd VARCHAR,
          	ccaa_cd VARCHAR,
          	sexo_cd BIGINT,
            zbs_residencia_cd VARCHAR,
          	grupo_edad_cd BIGINT,
            tsi_cd VARCHAR,
          	n_poblacion BIGINT);")

dbWriteTable(con, "zona_basica_tarjeta", poblaciones_tarjeta_df, append = TRUE)

relaciones_df <- read.csv(file = 'relacion_zbs_codatzbs_atlasfarmacia.csv', sep = '|',colClasses = c(zbs_residencia_cd = 'character'))

dbExecute(con, "CREATE OR REPLACE TABLE zbs_residencia_codatzbs (
            zbs_residencia_cd VARCHAR,
          	ccaa_cd VARCHAR,
            n_zbs VARCHAR,
          	codatzbs VARCHAR);")

dbWriteTable(con, "zbs_residencia_codatzbs", relaciones_df, append = TRUE)

dbExecute(con, 'CREATE OR REPLACE VIEW envase_dispensado_view AS SELECT envase_id, fecha_dispensacion_dt, paciente_id, edad_nm, sexo_cd, tsi_cd, zbs_residencia_cd, ccaa_cd, a.codigo_nacional_farmaco_cd,n.atc_farmaco_dispensado_cd
, n.ddd_nomenclator_nm, n.ddd_por_envase, n.pvp_nomenclator_nm, n.precio_por_envase_nm, n.mme_total  FROM main.envase_dispensado a
 LEFT JOIN main.nomenclator n
 ON a.codigo_nacional_farmaco_cd = n.codigo_nacional_farmaco_cd
 where n.codigo_nacional_farmaco_cd is not null')

dbDisconnect(con, shutdown=TRUE)

```




```{r, output=FALSE}
#| label: cargar scripts
log_info('Calculando tasas estandarizadas e indicadores estadísticos para ATC 4 caracteres')
source('./auxiliar_scripts/farmacia_standardized_opioides4.R')
rm(list=ls())
log_info('Calculando tasas estandarizadas e indicadores estadísticos para ATC 5 caracteres')
source('./auxiliar_scripts/farmacia_standardized_opioides5.R')
rm(list=ls())
```


```{r, output = FALSE}
#| label: eliminar y crear nuevos csvs

#### estadisticos ####
outputs_path <- '../../outputs/'
names_files_est <- list.files(path=outputs_path, pattern = '[4-5]_estadisticosobs', full.names=TRUE)
df_names_files_est <- data.frame(names_files = names_files_est,
                             variable = c('ddd','mme','pvp','ddd','mme','pvp'))
df <- data.frame()
for(file in names_files_est){
  data <- read.csv(file, sep = ",")
  df_names_files_est_filter <- df_names_files_est %>%
    filter(names_files == file)
  data$variable <- df_names_files_est_filter$variable
  df <- rbind(df,data)
}
# eliminar los archivos
file.remove(names_files_est)
df <- df %>% rename(year = año)
df$variable[df$variable=='ddd'] <- 'dhd'
write.table(df, file = paste0(outputs_path,"opioides_estadisticosobs.csv"),
            row.names = FALSE, sep = '|')

#### std_values ####

names_files_te <- list.files(path=outputs_path, pattern = '[4-5]_indicators_rates', full.names=TRUE)
df_names_files_te <- data.frame(names_files = names_files_te,
                             variable = c('ddd','mme','pvp','ddd','mme','pvp'))
df <- data.frame()
for(file in names_files_te){
  data <- read.csv(file, sep = ",")
  df_names_files_te_filter <- df_names_files_te %>%
    filter(names_files == file)
  data$variable <- df_names_files_te_filter$variable
  df <- rbind(df,data)
}
# eliminar ficheros
file.remove(names_files_te)
df <- df %>% rename(std_value = te, cum_var = total, year = año)
df$variable[df$variable=='ddd'] <- 'dhd'
df <- df %>% dplyr::select(year, codatzbs, n_zbs, indicator, cum_var, population, variable, std_value)
write.table(df, file = paste0(outputs_path,"opioides_dhd_mme_pvp_population_values.csv"),
            row.names = FALSE,  sep = '|')
df_ <- df %>% group_by(year, indicator, variable) %>% 
  summarise(mean_std_value = round(mean(std_value, na.rm=TRUE),2),
            sd_std_value = round(sd(std_value, na.rm = TRUE),2),
            p_05_std_value = round(quantile(std_value, 0.05, na.rm=TRUE),2),
            p_25_std_value = round(quantile(std_value, 0.25, na.rm=TRUE),2),
            p_50_std_value = round(quantile(std_value, 0.50, na.rm=TRUE),2),
            p_75_std_value = round(quantile(std_value, 0.75, na.rm=TRUE),2),
            p_95_std_value = round(quantile(std_value, 0.95, na.rm=TRUE),2)
            )
write.table(df_, file = paste0(outputs_path,"opioides_dhd_mme_pvp_resumen_anual.csv"),
            row.names = FALSE,  sep = '|')


```




```{r}
#| label: nomenclator_fail
database_path <- '../../inputs/data.duckdb'

con = dbConnect(duckdb::duckdb(), dbdir=database_path, read_only=FALSE)

nomenclator_fail <- dbGetQuery(conn = con, '
   SELECT envase_id, fecha_dispensacion_dt, paciente_id, edad_nm, sexo_cd, tsi_cd, zbs_residencia_cd, ccaa_cd, a.codigo_nacional_farmaco_cd,n.atc_farmaco_dispensado_cd
, n.ddd_nomenclator_nm, n.ddd_por_envase, n.pvp_nomenclator_nm, n.precio_por_envase_nm, n.mme_total  FROM main.envase_dispensado a
 LEFT JOIN main.nomenclator n
 ON a.codigo_nacional_farmaco_cd = n.codigo_nacional_farmaco_cd
 where n.codigo_nacional_farmaco_cd is null 
	')
nomenclator_fail[is.na(nomenclator_fail)] <- 0
total <- dbGetQuery(conn = con, '
   SELECT COUNT(*) as total FROM main.envase_dispensado
	')

registros_zbs_null <- dbGetQuery(conn = con,'
                                 select
	sum(n_pacientes) as total_pacientes,
	sum(n_envases) as total_envases
from
	(
	select
		ccaa_cd,
		zbs_residencia_cd,
		year(fecha_dispensacion_dt) as año_dt,
		count(DISTINCT envase_id) as n_envases,
		count(DISTINCT paciente_id) as n_pacientes
	from
		main.envase_dispensado_view
	group by
		ccaa_cd,
		zbs_residencia_cd,
		year(fecha_dispensacion_dt)) main_table
left join(
	SELECT
		DISTINCT año_cd, ccaa_cd ,
		zbs_residencia_cd
	from
		main.zona_basica_tarjeta) pop_table 
on
	main_table.ccaa_cd = pop_table.ccaa_cd and 
	main_table.zbs_residencia_cd = pop_table.zbs_residencia_cd and 
	main_table.año_dt = pop_table.año_cd 
where pop_table.zbs_residencia_cd is NULL')

registros_zbs_null[is.na(registros_zbs_null)] <- 0

registros_zbs_total_fail <- dbGetQuery(conn = con, '
                                       with partial_df as (
select
	envase_id,
	year(fecha_dispensacion_dt) as año_cd,
	paciente_id,
	CASE
		WHEN edad_nm >= 0
		and edad_nm <= 4 THEN 1
		WHEN edad_nm >= 5
		and edad_nm <= 9 THEN 2
		WHEN edad_nm >= 10
		and edad_nm <= 14 THEN 3
		WHEN edad_nm >= 15
		and edad_nm <= 19 THEN 4
		WHEN edad_nm >= 20
		and edad_nm <= 24 THEN 5
		WHEN edad_nm >= 25
		and edad_nm <= 29 THEN 6
		WHEN edad_nm >= 30
		and edad_nm <= 34 THEN 7
		WHEN edad_nm >= 35
		and edad_nm <= 39 THEN 8
		WHEN edad_nm >= 40
		and edad_nm <= 44 THEN 9
		WHEN edad_nm >= 45
		and edad_nm <= 49 THEN 10
		WHEN edad_nm >= 50
		and edad_nm <= 54 THEN 11
		WHEN edad_nm >= 55
		and edad_nm <= 59 THEN 12
		WHEN edad_nm >= 60
		and edad_nm <= 64 THEN 13
		WHEN edad_nm >= 65
		and edad_nm <= 69 THEN 14
		WHEN edad_nm >= 70
		and edad_nm <= 74 THEN 15
		WHEN edad_nm >= 75
		and edad_nm <= 79 THEN 16
		WHEN edad_nm >= 80
		and edad_nm <= 84 THEN 17
		WHEN edad_nm >= 85 THEN 18
		ELSE NULL
	END as grupo_edad_cd,
	sexo_cd,
	zbs_residencia_cd,
	ccaa_cd
from
	main.envase_dispensado_view) 
select sum(n_pacientes) as total_paciente, sum(n_envases) as total_envases from (select ccaa_cd, zbs_residencia_cd ,sexo_cd, grupo_edad_cd, año_cd,
count(DISTINCT envase_id) as n_envases,
count(DISTINCT paciente_id) as n_pacientes
from partial_df group by ccaa_cd, zbs_residencia_cd ,sexo_cd, grupo_edad_cd, año_cd) a 
left join (select ccaa_cd, año_cd, zbs_residencia_cd ,sexo_cd ,grupo_edad_cd, sum(n_poblacion) as n_poblacion from main.zona_basica_tarjeta GROUP BY ccaa_cd, año_cd, zbs_residencia_cd ,sexo_cd ,grupo_edad_cd) b 
on a.ccaa_cd = b.ccaa_cd and a.zbs_residencia_cd = b.zbs_residencia_cd and a.sexo_cd =b.sexo_cd and a.grupo_edad_cd = b.grupo_edad_cd and a.año_cd = b.año_cd
where n_poblacion is NULL')
registros_zbs_total_fail[is.na(registros_zbs_total_fail)]<-0
dbDisconnect(con, shutdown=TRUE)


```



```{r}
#| label: crear query


database_path <- '../../inputs/data.duckdb'

con = dbConnect(duckdb::duckdb(), dbdir=database_path, read_only=FALSE)

tabla1 <- dbGetQuery(conn = con, '
  select  
	ccaa_cd,
  COUNT(envase_id) as n_envases,
	count(DISTINCT paciente_id) as n_personas_dispensadas,
	sum(ddd_por_envase) as consumo_ddd,
	sum(pvp_nomenclator_nm) as gasto_pvp,
	sum(precio_por_envase_nm) as gasto_p_envase,
--	(gasto_pvp / n_envases) as gasto_medio_dispensacion,
--	(gasto_p_envase / n_envases) as gasto_medio_dispensacion_real
FROM
	(
	SELECT
		envase_id,
    paciente_id,
		ddd_nomenclator_nm,
		pvp_nomenclator_nm,
		precio_por_envase_nm,
    ddd_por_envase,
		ccaa_cd,
	from
		main.envase_dispensado_view) a
group by 
	ccaa_cd
	')



list_ccaa <- unique(tabla1$ccaa_cd)


tabla2 <- dbGetQuery(conn = con, '
  select  
	año_cd,
	ccaa_cd ,
  COUNT(envase_id) as n_envases,
	count(DISTINCT paciente_id) as n_personas_dispensadas,
	sum(ddd_por_envase) as consumo_ddd,
	sum(pvp_nomenclator_nm) as gasto_pvp,
	sum(precio_por_envase_nm) as gasto_p_envase,
--	(gasto_pvp / n_envases) as gasto_medio_dispensacion,
--	(gasto_p_envase / n_envases) as gasto_medio_dispensacion_real
FROM
	(
	SELECT
		envase_id,
    paciente_id,
		ddd_nomenclator_nm,
		pvp_nomenclator_nm,
		precio_por_envase_nm,
    ddd_por_envase,
		year(fecha_dispensacion_dt) as año_cd,
		ccaa_cd,
	from
		main.envase_dispensado_view) a
group by 
	año_cd,
	ccaa_cd,
order by 
    año_cd
	')


tabla3<- dbGetQuery(conn = con, '
  select
	año_cd,
	ccaa_cd ,
	zbs_residencia_cd,
	COUNT(envase_id) as n_envases,
	count(DISTINCT paciente_id) as n_personas_dispensadas,
	sum(ddd_por_envase) as consumo_ddd,
	sum(pvp_nomenclator_nm) as gasto_pvp,
	sum(precio_por_envase_nm) as gasto_p_envase,
--	(gasto_pvp / n_envases) as gasto_medio_dispensacion,
--	(gasto_p_envase / n_envases) as gasto_medio_dispensacion_real
FROM
	(
	SELECT
		envase_id,
		ddd_nomenclator_nm,
    ddd_por_envase,
		pvp_nomenclator_nm,
		precio_por_envase_nm,
		atc_farmaco_dispensado_cd,
		paciente_id,
		year(fecha_dispensacion_dt) as año_cd,
		zbs_residencia_cd,
		ccaa_cd,
	from
		main.envase_dispensado_view) a
group by
	año_cd,
	zbs_residencia_cd,
	ccaa_cd
order by
    año_cd,
    zbs_residencia_cd
	')

tabla_envases_año <- dbGetQuery(conn=con,
                  " SELECT
	año_cd, 
	atc_farmaco_dispensado_short,
	count(DISTINCT paciente_id) as pacientes_nm,
  count(DISTINCT envase_id) as n_envases,
	sum(ddd_por_envase) as consumo_ddd,
	sum(pvp_nomenclator_nm) as gasto_pvp
from
	(
	select
		year(fecha_dispensacion_dt) as año_cd,
		paciente_id,
    envase_id,
		atc_farmaco_dispensado_cd[1:5] as atc_farmaco_dispensado_short,
		ddd_nomenclator_nm,
    ddd_por_envase,
		pvp_nomenclator_nm
	from
		main.envase_dispensado_view WHERE atc_farmaco_dispensado_short in ('N02AA', 'N02AB', 'N02AX', 'N02AJ','N02AE')
	)
GROUP BY
	año_cd,
	atc_farmaco_dispensado_short
")


pobla_tsi <- dbGetQuery(conn = con,
                  paste0("SELECT * FROM main.zona_basica_tarjeta where ccaa_cd = '",list_ccaa,"' and sexo_cd IN (1,2)")
)

evolucion_temporal_tsi <- dbGetQuery(conn=con,
                  " SELECT
	año_cd, 
	atc_farmaco_dispensado_short,
	tsi_cd,
	count(DISTINCT paciente_id) as pacientes_nm,
  count(DISTINCT envase_id) as n_envases,
	sum(ddd_por_envase) as consumo_ddd,
	sum(pvp_nomenclator_nm) as gasto_pvp
from
	(
	select
		year(fecha_dispensacion_dt) as año_cd,
		paciente_id,
    envase_id,
		atc_farmaco_dispensado_cd[1:5] as atc_farmaco_dispensado_short,
		ddd_nomenclator_nm,
    ddd_por_envase,
		pvp_nomenclator_nm,
    tsi_cd
	from
		main.envase_dispensado_view WHERE atc_farmaco_dispensado_short in ('N02AA', 'N02AB', 'N02AX', 'N02AJ','N02AE')
	)
GROUP BY
	año_cd,
	atc_farmaco_dispensado_short,
  tsi_cd
")


aggregated_output <- dbGetQuery(conn = con, 
                  "with partial_df as (
select
	envase_id,
	year(fecha_dispensacion_dt) as año_cd,
	month(fecha_dispensacion_dt) as mes_cd,
	paciente_id,
	CASE
		WHEN edad_nm >= 0
		and edad_nm <= 4 THEN 1
		WHEN edad_nm >= 5
		and edad_nm <= 9 THEN 2
		WHEN edad_nm >= 10
		and edad_nm <= 14 THEN 3
		WHEN edad_nm >= 15
		and edad_nm <= 19 THEN 4
		WHEN edad_nm >= 20
		and edad_nm <= 24 THEN 5
		WHEN edad_nm >= 25
		and edad_nm <= 29 THEN 6
		WHEN edad_nm >= 30
		and edad_nm <= 34 THEN 7
		WHEN edad_nm >= 35
		and edad_nm <= 39 THEN 8
		WHEN edad_nm >= 40
		and edad_nm <= 44 THEN 9
		WHEN edad_nm >= 45
		and edad_nm <= 49 THEN 10
		WHEN edad_nm >= 50
		and edad_nm <= 54 THEN 11
		WHEN edad_nm >= 55
		and edad_nm <= 59 THEN 12
		WHEN edad_nm >= 60
		and edad_nm <= 64 THEN 13
		WHEN edad_nm >= 65
		and edad_nm <= 69 THEN 14
		WHEN edad_nm >= 70
		and edad_nm <= 74 THEN 15
		WHEN edad_nm >= 75
		and edad_nm <= 79 THEN 16
		WHEN edad_nm >= 80
		and edad_nm <= 84 THEN 17
		WHEN edad_nm >= 85 THEN 18
		ELSE NULL
	END as grupo_edad_cd,
	sexo_cd,
	tsi_cd,
	zbs_residencia_cd,
	ccaa_cd, 
	atc_farmaco_dispensado_cd[1:7] as atc_farmaco_dispensado_7,
	ddd_nomenclator_nm,
	ddd_por_envase,
	pvp_nomenclator_nm,
	precio_por_envase_nm,
  mme_total
from
	main.envase_dispensado_view)
select
	a.*,
	n_poblacion
from
	(
	select
		atc_farmaco_dispensado_7 as atc_farmaco_dispensado ,
		año_cd,
		mes_cd,
		ccaa_cd,
		zbs_residencia_cd ,
		sexo_cd,
		grupo_edad_cd,
		tsi_cd ,
		sum(ddd_por_envase) as consumo_ddd_por_envase,
    sum(mme_total) as consumo_mme,
		sum(pvp_nomenclator_nm) as gasto_pvp_nomenclator_nm,
		sum(precio_por_envase_nm) as gasto_precio_por_envase_nm,
		count(DISTINCT paciente_id) as pacientes_nm,
		count(DISTINCT envase_id) as n_envases,
	from
		partial_df
	where
		sexo_cd in (1, 2)
	group by
		atc_farmaco_dispensado_7 ,
		ccaa_cd,
		mes_cd,
		zbs_residencia_cd ,
		sexo_cd,
		grupo_edad_cd,
		tsi_cd,
		año_cd) a
left join main.zona_basica_tarjeta b 
on
	a.año_cd = b.año_cd and 
	a.ccaa_cd = b.ccaa_cd
	and a.zbs_residencia_cd = b.zbs_residencia_cd
	and a.sexo_cd = b.sexo_cd
	and a.grupo_edad_cd = b.grupo_edad_cd
	and a.tsi_cd = b.tsi_cd   
 
	")

write.table(aggregated_output,'../../outputs/aggregated_outputs.csv', sep = '|', row.names = FALSE)
rm(aggregated_output)


evolucion_temporal_envases_atc <- dbGetQuery(conn=con,
                  " SELECT
	year(fecha_dispensacion_dt) as año_cd,
	atc_farmaco_dispensado_cd[1:7] as atc_farmaco_dispensado_short,
  count(DISTINCT envase_id) as n_envases,
	sum(ddd_por_envase) as consumo_ddd,
	sum(pvp_nomenclator_nm) as gasto_pvp
	from
		main.envase_dispensado_view
GROUP BY
	año_cd,
	atc_farmaco_dispensado_short
")

df_piramide <- dbGetQuery(conn=con,
                  "SELECT
  year(fecha_dispensacion_dt) as año_cd,
	sexo_cd,
		CASE
		WHEN edad_nm >= 0
		and edad_nm <= 4 THEN '00-04 años'
		WHEN edad_nm >= 5
		and edad_nm <= 9 THEN '05-09 años'
		WHEN edad_nm >= 10
		and edad_nm <= 14 THEN '10-14 años'
		WHEN edad_nm >= 15
		and edad_nm <= 19 THEN '15-19 años'
		WHEN edad_nm >= 20
		and edad_nm <= 24 THEN '20-24 años'
		WHEN edad_nm >= 25
		and edad_nm <= 29 THEN '25-29 años'
		WHEN edad_nm >= 30
		and edad_nm <= 34 THEN '30-34 años'
		WHEN edad_nm >= 35
		and edad_nm <= 39 THEN '35-39 años'
		WHEN edad_nm >= 40
		and edad_nm <= 44 THEN '40-44 años'
		WHEN edad_nm >= 45
		and edad_nm <= 49 THEN '45-49 años'
		WHEN edad_nm >= 50
		and edad_nm <= 54 THEN '50-54 años'
		WHEN edad_nm >= 55
		and edad_nm <= 59 THEN '55-59 años'
		WHEN edad_nm >= 60
		and edad_nm <= 64 THEN '60-64 años'
		WHEN edad_nm >= 65
		and edad_nm <= 69 THEN '65-69 años'
		WHEN edad_nm >= 70
		and edad_nm <= 74 THEN '70-74 años'
		WHEN edad_nm >= 75
		and edad_nm <= 79 THEN '75-79 años'
		WHEN edad_nm >= 80
		and edad_nm <= 84 THEN '80-84 años'
		WHEN edad_nm >= 85 THEN '85 años o más'
		ELSE NULL
	END as grupo_edad_cd,
	count(DISTINCT paciente_id) as n_personas_dispensadas
from
		main.envase_dispensado_view
WHERE grupo_edad_cd IS NOT NULL or sexo_cd is NOT NULL
GROUP BY
	grupo_edad_cd,
  sexo_cd,
  año_cd")
df_piramide <- df_piramide %>% filter(año_cd %in% max(año_cd,na.rm=TRUE))
df_piramide <- df_piramide %>% filter(sexo_cd %in% c(1,2))
consumo_zbs_total <- dbGetQuery(conn=con,
  " SELECT
  year(fecha_dispensacion_dt) as año_cd,
  zbs_residencia_cd,
	count(DISTINCT paciente_id) as pacientes_nm,
  count(DISTINCT envase_id) as n_envases,
	sum(ddd_por_envase) as consumo_ddd,
	sum(pvp_nomenclator_nm) as gasto_pvp
from
		main.envase_dispensado_view
GROUP BY 
  año_cd,
  zbs_residencia_cd
")
consumo_zbs_total <- consumo_zbs_total %>% filter(año_cd %in% max(año_cd,na.rm=TRUE))

rel_zbs_codatzbs <- dbGetQuery(conn = con,
                  paste0("SELECT * FROM main.zbs_residencia_codatzbs where ccaa_cd = '",list_ccaa,"'")
)

distri_zbs_atc <- dbGetQuery(conn=con,
                  "SELECT
	año_cd, 
	zbs_residencia_cd,
	atc_farmaco_dispensado_short,
	sum(ddd_por_envase) as consumo_ddd,
	sum(pvp_nomenclator_nm) as gasto_pvp
from
	(
	select
		year(fecha_dispensacion_dt) as año_cd,
    zbs_residencia_cd,
		paciente_id,
    envase_id,
		atc_farmaco_dispensado_cd[1:5] as atc_farmaco_dispensado_short,
		ddd_nomenclator_nm,
    ddd_por_envase,
		pvp_nomenclator_nm,
    tsi_cd
	from
		main.envase_dispensado_view WHERE atc_farmaco_dispensado_short in ('N02AA', 'N02AB', 'N02AX', 'N02AJ','N02AE'))
GROUP BY año_cd,zbs_residencia_cd,atc_farmaco_dispensado_short
")






dbDisconnect(con, shutdown=TRUE)

```


# Antecedentes y justificación

::: {.justify}

La cantidad y el tipo de medicamentos que una población o un individuo consume puede variar enormemente dependiendo del lugar dónde viva. La utilización de los medicamentos, como sucede con otras tecnologías sanitarias, está sujeta a una gran variabilidad. El conocimiento de las *variaciones en la práctica médica*, entendidas como las variaciones sistemáticas --no aleatorias- en las tasas estandarizadas de un procedimiento sanitario a un determinado nivel de agregación de la población, es indispensable para identificar problemas de política y gestión sanitaria y orientar la toma de decisiones sobre los servicios de salud. En nuestro país, el grupo de Variaciones en la Práctica Médica del Sistema Nacional de Salud (Grupo VPM-SNS) publica el Atlas de Variaciones en la Práctica Médica en el Sistema Nacional de Salud con interesantes contribuciones empíricas al conocimiento de la utilización hospitalaria (ingresos e intervenciones quirúrgicas) en el Sistema Nacional de Salud (SNS) [@angulo_pueyo_atlas_2022].

Las variaciones poblacionales en los patrones de prescripción suponen un desafío importante para todos los Sistemas de Salud. Este proyecto de investigación pretende, esencialmente, aportar información empírica sobre la variabilidad en los patrones de consumo de medicamentos, siendo sus objetivos describir la variabilidad en dosis dispensadas (DDD por 1000 habitantes y día) y gasto farmacéutico en la dispensación de opioides  entre las zonas básicas de salud participantes y  analizar, las relaciones entre las tasas de dispensación  de los diversos grupos terapéuticos.

:::

# Hipótesis

::: {.justify}

El proyecto tiene un componente básico de carácter descriptivo sobre el que se formulan las siguientes hipótesis operativas:

1. Respecto a la evaluación de las diferencias entre las tasas de consumo y gasto farmacéutico se parte de la hipótesis nula de no existencia de diferencias entre zonas básicas de salud, una vez estandarizadas las tasas por la estructura de edad y sexo de cada área.

2. Respecto a la relación de las tasas de consumo entre sí, se parte de la hipótesis de que existirán asociaciones entre los consumos de los subgrupos terapéuticos utilizados para las mismas patologías.

:::
# Objetivos

::: {.justify}


El objetivo principal de este estudio es describir el número de envases dispensados y el número de pacientes tratados además de estimar el consumo, y el gasto farmacéutico estandarizado en un grupo de fármacos (en concreto, opioides) para determinados subgrupos terapéuticos de ellos en función del código ATC [@ATC_2023] en las zonas básicas de salud (ZBS) de las comunidades autónomas (CCAA) participantes y analizar si las posibles variaciones detectadas son sistemáticas o explicables por el azar.


:::
## Objetivos específicos
::: {.justify}

1. Describir y cartografiar (análisis geográfico) el consumo (DHD) y el gasto farmacéutico por zonas básicas de salud (ZBS).

2. Analizar la posible existencia de diferencias entre zonas usando el análisis de áreas pequeñas.

3. Analizar la existencia de asociaciones entre las tasas de consumo de los diferentes subgrupos terapéuticos.

:::
# Metodología 

## Diseño
::: {.justify}

Estudio observacional, retrospectivo, longitudinal y ecológico del consumo y gasto farmacéutico estandarizado en opioides. El consumo se calculará como Dosis por mil Habitantes Día (DHD) y el gasto se calculará como sumatorio de precio de venta al público en € (PVP) por grupo de edad y sexo en cada zona básica de salud (ZBS).

:::
## Fuentes de información
::: {.justify}


El origen de la información se corresponde con las bases de datos de medicamentos prescritos en receta oficial del Sistema Nacional de Salud (SNS), también conocido como receta electrónica. Los datos utilizados son los datos de envases dispensados desde el 1 de Enero de 2013 al 31 de Diciembre de 2022 para los ATC seleccionados, registrados por los Servicios de Farmacia de las CCAA participantes. 

### Nomenclator

::: {.callout-warning appearance="simple"}

El nomenclator usado como referencia para todos los años es el nomenclator del Ministerio de Sanidad (Junio 2022) para todas las CCAA en el que se han modificado los DDD de los fármacos combinados para especificar el DDD del fármaco de interés (opioides). 
El mismo nomenclator se aplica todos los años para poder realizar comparaciones y no atribuir variaciones a cambios en los precios de los medicamentos.

```{epoxy}
Existen {length(unique(nomenclator_fail$codigo_nacional_farmaco_cd))} códigos nacionales de fármaco que no cruzan con el nomenclator. Se pierden {nrow(nomenclator_fail)} registros de {total$total}.

```

:::

:::
## Población estudiada

::: {.justify}

La unidad de análisis es la Zona Básica de Salud (ZBS) de las CCAA participantes que son: Aragón, Islas Baleares, Canarias, Cantabria, Castilla y León, Cataluña, Comunidad de Madrid, Comunidad Foral de Navarra, Comunidad Valenciana, País Vasco y Principado de Asturias. Estas ZBS engloban a las poblaciones de cada ZBS distribuidas en función de su modalidad de copago identificadas a partir de las categorías de Tarjeta Sanitaria (TSI - Tarjeta Sanitaria Individual). Existen 8 categorías de TSI:


- 0 = "TSI 000 sin aseguramiento", 

- 1 = "TSI 001 farmacia gratuita", 

- 2 = "TSI 002-01 pensionistas tipo i", 

- 3 = "TSI 002-02 pensionistas tipo ii", 

- 4 = "TSI 003 activos tipo i", 

- 5 = "TSI 004 activos tipo ii", 

- 6 = "TSI 005 activos tipo máximo", 

- 7 = "TSI 005-03 pensionistas tipo máximo" y 

- 8 = "TSI 006 mutualistas". 

Quedan por lo tanto excluidos los habitantes sin derecho a la prestación farmacéutica, esencialmente los adscritos a las mutualidades de funcionarios que usan su propio sistema de recetas.
:::


### Población de tarjeta sanitaria por zona básica de salud (ZBS)

::: {.callout-warning appearance="simple"}

```{epoxy}
Existen {registros_zbs_null$total_envases} registros ({registros_zbs_null$total_pacientes} pacientes) para los que su zona básica de salud es nula en los datos o no se ha podido enlazar con ningún código de zona básica del fichero de poblaciones. Hay un total de {registros_zbs_total_fail$total_envases - registros_zbs_null$total_envases} registros ({registros_zbs_total_fail$total_paciente - registros_zbs_null$total_pacientes} pacientes) que se pierden por que no hay población para su zona básica de salud, edad y sexo, por tanto, se pierden para la @sec-variaciones_zbs {registros_zbs_total_fail$total_envases} de un total de {total$total} registros.

```

:::


## Clasificación opioides
::: {.justify}
Los opioides son un tipo de fármacos analgésicos cuya acción se produce debido a su interacción con los receptores opioides de las neuronas del sistema nervioso central. Son los analgésicos más potentes que existen actualmente.

Se clasifican en: 




```{r}
#| label: tabla clasificación opioides
data <- data.frame(grupo_mayor = c('N02A',"Alcaloides naturales del opio (N02AA)",
             'Derivados de fenilpiperidina (N02AB)',
             'Otros opioides (N02AX)',
             'Opioides en combinación con analgésicos no opioides (N02AJ)',
             'Derivados de oripavina (N02AE)','Morfina (N02AA01)',
'Hidromorfona (N02AA03)',
'Oxicodona (N02AA05)',
'Dihidrocodeína (N02AA08)',
'Oxicodona y naloxona (N02AA55)',
'Petidina (N02AB02)',
'Fentanilo (N02AB03)',
'Buprenorfina(N02AE01)',
'Tramadol (N02AX02)',
'Tapentadol (N02AX06)',
'Tramadol y paracetamol (N02AJ13)',
'Codeína y paracetamol (N02AJ06)',
'Codeína y ácido acetilsalicílico (N02AJ07)',
'Codeína e ibuprofeno (N02AJ08)',
'Codeína y otros analgésicos no opiáceos (N02AJ09)')) 
 
  data %>% gt(rowname_col = "grupo_mayor") %>% 
       tab_header(
    title = "CLASIFICACIÓN DE LOS OPIOIDES") %>% 
      tab_options(
    column_labels.font.size = 10,
    
  ) %>%  
      tab_style(
    style = cell_fill(color = "gray90"),
    locations = cells_title()
  ) %>% 
        tab_row_group(
    label = md("**Subgrupos ATC (7 dígitos)**"),
    rows = 	c('Morfina (N02AA01)',
'Hidromorfona (N02AA03)',
'Oxicodona (N02AA05)',
'Dihidrocodeína (N02AA08)',
'Oxicodona y naloxona (N02AA55)',
'Petidina (N02AB02)',
'Fentanilo (N02AB03)',
'Buprenorfina(N02AE01)',
'Tramadol (N02AX02)',
'Tapentadol (N02AX06)',
'Tramadol y paracetamol (N02AJ13)',
'Codeína y paracetamol (N02AJ06)',
'Codeína y ácido acetilsalicílico (N02AJ07)',
'Codeína e ibuprofeno (N02AJ08)',
'Codeína y otros analgésicos no opiáceos (N02AJ09)')
  ) %>% 
      tab_style(
    style = cell_fill(color = "#b3cde0"),
    locations = cells_row_groups(groups = '**Subgrupos ATC (7 dígitos)**')
  ) %>%
          tab_row_group(
    label = md("**Subgrupos ATC (5 dígitos)**"),
    rows = c("Alcaloides naturales del opio (N02AA)",
             'Derivados de fenilpiperidina (N02AB)',
             'Otros opioides (N02AX)',
             'Opioides en combinación con analgésicos no opioides (N02AJ)',
             'Derivados de oripavina (N02AE)'
  )) %>% 
      tab_style(
    style = cell_fill(color = "#b3cde0"),
    locations = cells_row_groups(groups = '**Subgrupos ATC (5 dígitos)**')
  ) %>% 
    tab_row_group(
    label = md("**Grupo ATC (4 dígitos)**"),
    rows = c("N02A")
  ) %>% 
      tab_style(
    style = cell_fill(color = "#b3cde0"),
    locations = cells_row_groups(groups = '**Grupo ATC (4 dígitos)**')
  ) %>% 
      cols_align(
  align =  "center",
  columns = everything()) %>% 
      tab_style(
    style = cell_text(align = "center"),
    locations = cells_row_groups())
    

  

rm(data)
```

:::

## Indicadores

::: {.justify}

Se estudiarán los subgrupos de opiodes en función del ATC (5 dígitos) del fármaco que se corresponden con:


- Alcaloides naturales del opio (*N02AA*), 

- Derivados de fenilpiperidina (*N02AB*), 

- Otros opioides (*N02AX*), 

- Opioides en combinación con analgésicos no opioides (*N02AJ*), 

- Derivados de oripavina (*N02AE*).

:::



## Variables calculadas
::: {.justify}
- Dosis por mil Habitantes Día (DHD): se calcula siguiendo la siguiente expresión: $$DHD = ((Nº DDD * 1000_{habitantes})/ (población * 365_{días}))$$ 
siendo *Nº DDD* el sumatorio de DDD por envase y *población* la población en cada uno de las categorías de edad y sexo para cada año.

- Gasto PVP en € por habitante: es el sumatorio del gasto (tomando el PVP como precio de referencia) dividido entre la población en cada uno de las categorías de edad y sexo para cada año.

- Nº de envases dispensados por habitante: es el sumatorio del número de envases dividido entre la población en cada uno de las categorías de edad y sexo para cada año.

:::

::: {.callout-tip}
## Nota informativa

Se calcula también el consumo en miligramos equivalentes de morfina (MME) por 1000 habitantes/día utilizando los factores de conversión para cada principio activo en MME disponibles en [@Korff_2008], [@Nielsen_2015].
:::


# Resultados del Análisis local (CCAA: `r list_ccaa`)

## Descriptivo
::: {.justify}

En primer lugar, las siguientes tres tablas (Tabla 1, Tabla 2 y Tabla 3) muestran los acumulados de número de envases dispensados, número de personas dispensadas, dosis diaria definida (DDD) y precio de venta al público del fármaco dispensado en € (PVP) en distintos niveles de agregación:

- Tabla 1: Totales (todos los años)

- Tabla 2: Totales por año

- Tabla 3: Totales por ZBS y año 
:::
::: {.callout-tip}
## Nota informativa

Las siguientes tablas son interactivas y permiten la búsqueda de información dentro de ellas, así como su ordenación por variables clickando sobre el nombre de la variable en la cabecera de la columna.
:::
### Tabla 1
```{r}
tabla1 %>% dplyr::select(!c(ccaa_cd,gasto_p_envase)) %>% 
  gt() %>% 
  tab_options(
    column_labels.font.size = 10,
  ) %>% 
    tab_header(
    title = "Tabla de datos crudos totales para el Nº de envases dispensados, Nº de personas dispensadas, acumulado DDD y acumulado PVP") %>% 
  fmt_number(decimals = 2,
             sep_mark = '.',
             dec_mark=',') %>% 
    cols_label(
    n_envases = 'Nº de envases dispensados',
    n_personas_dispensadas = 'Nº de personas dispensadas',
    consumo_ddd = "Acumulado DDD (#)",
    gasto_pvp = 'Acumulado PVP (€)'
  ) %>% 
  fmt_currency(
    columns = c('gasto_pvp'),
    currency = "euro",
     placement = "right",
                 sep_mark = '.',
             dec_mark=','
  ) %>% 
  fmt_number(columns = c('n_envases','n_personas_dispensadas'),
             decimals = 0,
             use_seps = FALSE) %>%
  cols_align(
  align =  "center",
  columns = everything()
) %>% 
  opt_interactive(use_filters = TRUE,
                  use_compact_mode = TRUE,
                  use_resizers = TRUE)


```


### Tabla 2

```{r}

tabla2 %>% dplyr::select(!c(ccaa_cd,gasto_p_envase)) %>% 
  gt() %>% 
      tab_header(
    title = "Tabla de datos crudos por año para el Nº de envases dispensados, Nº de personas dispensadas, acumulado DDD y acumulado PVP") %>% 
  tab_options(
    column_labels.font.size = 10,
  ) %>% 
  fmt_number(decimals = 2,
             sep_mark = '.',
             dec_mark=',')%>% 
    cols_label(
    año_cd = "Año",
    n_envases = 'Nº de envases dispensados',
    n_personas_dispensadas = 'Nº de personas dispensadas',
    consumo_ddd = "Acumulado DDD (#)",
    gasto_pvp = 'Acumulado PVP (€)'
  ) %>% 
  fmt_currency(
    columns = c('gasto_pvp'),
    currency = "euro",
     placement = "right",
                 sep_mark = '.',
             dec_mark=','
  ) %>% 
    cols_align(
  align =  "center",
  columns = everything()
) %>% 
    fmt_number(columns = c('año_cd','n_envases','n_personas_dispensadas'),
             decimals = 0,
             use_seps = FALSE) %>% 
  opt_interactive(use_filters = TRUE,
                  use_compact_mode = TRUE,
                  use_resizers = TRUE)


 
```



Se presentan como diagrama de barras horizontal los resultados de la anterior tabla

::: {.callout-tip}
## Nota informativa

Las siguientes figuras que se muestran son interactivas. Colocando el cursor sobre cada una de las barras se muestra el año y el valor del acumulado.
:::

::: {.panel-tabset}
### Acumulado DDD (#)

```{r}
#| label: acumulado_ddd
plot1 <- ggplot(data = tabla2, aes(x = factor(año_cd), y = consumo_ddd, text = paste("Año:", año_cd, "\nAcumulado DDD:", round(consumo_ddd,2)))) + 
  geom_bar(width = 0.9, stat="identity", fill = '#1C317F') +
      labs(title = 'Acumulado DDD por año (#)', 
         x = 'Año',
         y = 'Acumulado DDD') +
      theme(title = element_text(size = 20), panel.grid.major = element_blank(), 
          panel.grid.minor = element_blank(),
          panel.background = element_blank(), axis.title = element_text(size = 14),
          axis.text = element_text(size = 14),  
          legend.text = element_text(size = 12), legend.title = element_text(size = 12), 
          axis.ticks = element_blank()) +
  scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = ' M', accuracy=1))  +
  coord_flip()

ggplotly(plot1, tooltip = 'text')


```

### Acumulado PVP (€)

```{r}
#| label: acumulado_pvp
plot2 <- ggplot(data = tabla2, aes(x = factor(año_cd), y = gasto_pvp, text = paste("Año:", año_cd, "\nAcumulado PVP:", round(gasto_pvp,2)))) + 
  geom_bar(width = 0.9, stat="identity", fill = '#1C317F') +
      labs(title = 'Acumulado PVP por año (€)', 
         x = 'Año',
         y = 'Acumulado PVP') +
      theme(title = element_text(size = 20), panel.grid.major = element_blank(), 
          panel.grid.minor = element_blank(),
          panel.background = element_blank(), axis.title = element_text(size = 14),
          axis.text = element_text(size = 14), 
          legend.text = element_text(size = 12), legend.title = element_text(size = 12), 
          axis.ticks = element_blank()) + 
  scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = ' M', accuracy=1)) +
  coord_flip()

ggplotly(plot2, tooltip = 'text')

```

:::

### Tabla 3

```{r}

tabla3 %>% dplyr::select(!c(ccaa_cd,gasto_p_envase)) %>% 
  gt() %>% 
  tab_options(
    column_labels.font.size = 10,
  )  %>% 
        tab_header(
    title = "Tabla de datos crudos por año y zona básica de salud para el Nº de envases dispensados, Nº de personas dispensadas, acumulado DDD y acumulado PVP") %>% 
  fmt_number(decimals = 2,
             sep_mark = '.',
             dec_mark=',') %>% 
    cols_label(
    año_cd = "Año",
    zbs_residencia_cd = 'ZBS',
    n_envases = 'Nº de envases dispensados',
    n_personas_dispensadas = 'Nº de personas dispensadas',
    consumo_ddd = "Acumulado DDD (#)",
    gasto_pvp = 'Acumulado PVP (€)'
  ) %>%
  fmt_currency(
    columns = c('gasto_pvp'),
    currency = "euro",
     placement = "right",
                 sep_mark = '.',
             dec_mark=','
  ) %>% 
    cols_align(
  align =  "center",
  columns = everything()
) %>% 
    fmt_number(columns = c('año_cd', 'n_personas_dispensadas', 'n_envases'),
             decimals = 0,
             use_seps = FALSE) %>% 
  opt_interactive(use_filters = TRUE,
                  use_compact_mode = TRUE,
                  use_resizers = TRUE)

```


## Distribución de la población con dispensaciones de opioides por edad y sexo en el último año disponible 
::: {.justify}
Se muestra la distribución de la población con dispensaciones por grupo quinquenal de edad y sexo en el último año disponible.
:::

```{r}
#| label: Pirámide
df_piramide$grupo_edad_cd <- as.factor(df_piramide$grupo_edad_cd)
df_piramide$sexo_cd <- factor(df_piramide$sexo_cd, labels = c("Hombres","Mujeres"))
df_piramide <- df_piramide[order(df_piramide$grupo_edad_cd),]
df_piramide <- df_piramide %>% mutate(percent = round(100*(n_personas_dispensadas/sum(n_personas_dispensadas)),1))


nudge_fun <- function(df){
  ifelse(df$sexo_cd == "Hombres", (sd(df$percent)/3)*-1.5, sd(df$percent)/3+1.5)
}

p <- df_piramide %>%
  # First, we transforms the columns so that female values show in the
  # left-hand side of the plot, in this case as 'negative values'.
  # I also round some values for convenience.
  mutate(
    n_personas_dispensadas = ifelse(sexo_cd=="Hombres", n_personas_dispensadas*(-1), n_personas_dispensadas*1), 
    percent = ifelse(sexo_cd=="Hombres", percent*(-1), percent*1), 
    share = paste0(abs(round(percent,1)), "%")
  ) %>% 
  ggplot(aes(x = percent, y=grupo_edad_cd, label = share)) +
  geom_col(aes(fill=sexo_cd)) +
  geom_text(aes(label = share),
            position = position_nudge(x = nudge_fun(df_piramide)),
            size = 4
  ) +
  scale_fill_manual(name = "Sexo", values=c("#5983b0","#e8a202")) +
  labs(title = paste0("Pirámide de edad y sexo de personas dispensadas (",df_piramide$año_cd,")"),
       x = "", y = "") +
    scale_x_continuous(
    "", breaks = scales::pretty_breaks(n = 6),
    # Small function to rescale y axis
    labels =  function(br) abs(br)
  ) +
      theme(title = element_text(size = 14), plot.title = element_text(hjust = 1.0) , panel.background = element_blank(),axis.line = element_blank(),axis.title = element_text(size = 12),
        axis.text = element_text(size = 12), legend.position = "bottom", legend.justification = "center",legend.text = element_text(size = 12),
        axis.ticks = element_blank())
p
#rm(df_piramide)
```


## Porcentaje de población con dispensaciones de opioides por edad y sexo en el último año disponible 
::: {.justify}
Se muestra el porcentaje de la población con dispensaciones por grupo quinquenal de edad y sexo con respecto a su población total de cada grupo de edad y sexo respectivamente en el último año disponible.
:::



```{r}
#| label: porcentaje

pobla_tsi_ <- pobla_tsi %>% filter(año_cd %in% df_piramide$año_cd)
df_piramide_ <- df_piramide %>% dplyr::select(!percent)
pobla_tsi_$sexo_cd <- factor(pobla_tsi_$sexo_cd, labels = c("Hombres","Mujeres"))
pobla_tsi_ <- pobla_tsi_ %>% group_by(sexo_cd,grupo_edad_cd) %>% 
  summarise(n_poblacion = sum(n_poblacion, na.rm=TRUE))
pobla_tsi_ <- pobla_tsi_ %>% rename(quinquenio = grupo_edad_cd)
#grupos <- unique(df_piramide_$grupo_edad_cd)
df_agecat <- data.frame(quinquenio = c(4,5,6,7,8,9,10,11,12,13,14,15,16,17,18),
                        grupo_edad_cd = c('15-19 años', '20-24 años','25-29 años','30-34 años', '35-39 años','40-44 años','45-49 años','50-54 años','55-59 años','60-64 años','65-69 años','70-74 años','75-79 años','80-84 años','85 años o más'))
pobla_tsi_ <- left_join(pobla_tsi_, df_agecat, by = 'quinquenio')
df_piramide_ <- left_join(df_piramide_, pobla_tsi_[c('sexo_cd','grupo_edad_cd','n_poblacion','quinquenio')], by = c('sexo_cd','grupo_edad_cd'))

df_piramide_ <- df_piramide_ %>% mutate(percent = round(((n_personas_dispensadas/n_poblacion)*100),2))

p <- df_piramide_ %>%
  # First, we transforms the columns so that female values show in the
  # left-hand side of the plot, in this case as 'negative values'.
  # I also round some values for convenience.
  mutate(
    n_personas_dispensadas = ifelse(sexo_cd=="Hombres", n_personas_dispensadas*(-1), n_personas_dispensadas*1), 
    percent = ifelse(sexo_cd=="Hombres", percent*(-1), percent*1), 
    share = paste0(abs(round(percent,1)), "%")
  ) %>% 
  ggplot(aes(x = percent, y=grupo_edad_cd, label = share)) +
  geom_col(aes(fill=sexo_cd)) +
  geom_text(aes(label = share),
            position = position_nudge(x = nudge_fun(df_piramide_)),
            size = 3.0
  ) +
  scale_fill_manual(name = "Sexo", values=c("#5983b0","#e8a202")) +
  labs(title = paste0("Porcentaje de población por edad y sexo de personas dispensadas (",df_piramide_$año_cd,")"),
       x = "", y = "") +
    scale_x_continuous(
    "", breaks = scales::pretty_breaks(n = 6),
    # Small function to rescale y axis
    labels =  function(br) abs(br),
    limits = c(-60, 60)
  ) + coord_flip() +
      theme(title = element_text(size = 12), plot.title = element_text(hjust = 1.0) , panel.background = element_blank(),axis.line = element_blank(),axis.title = element_text(size = 12),
        axis.text = element_text(size = 10), 
        axis.text.x = element_text(angle = 90),
        legend.position = "bottom", legend.justification = "center",legend.text = element_text(size = 12),
        axis.ticks = element_blank()) 
p
rm(df_piramide_)
```


## Evolución del número de envases dispensados por año de cada ATC dentro de los grupos mayores

::: {.justify}
Se muestra el número de envases dispensados por año para cada grupo de ATC dentro de los grupos mayores.
:::

::: {.callout-tip}
## Nota informativa

La siguiente figura que se muestra es interactiva. Colocando el cursor sobre cada una de las barras se muestra el año y el número de envases.
:::

```{r}
#| label: Evolución del número de envases dispensados por año
df_list_indicators <- data.frame(indicators = c('N02AA', 'N02AB', 'N02AX', 'N02AJ','N02AE'),
                                 descr = c('Alcaloides naturales del opio', 'Derivados de fenilpiperidina', 'Otros opioides',
                                           'Opioides en combinación con analgésicos no opioides','Derivados de oripavina'))
tabla_envases_año$año_cd <- factor(tabla_envases_año$año_cd)
p <- list()
plot_nenv_per_year <- function(ind){


    data_filter <- tabla_envases_año %>% filter(atc_farmaco_dispensado_short %in% ind)
    df_list_indicators_ <- df_list_indicators %>% filter(indicators %in% ind)
    
    plot <- ggplot(data_filter,aes(x = año_cd, y=n_envases, text = paste("Año:", año_cd, "\nNº envases:", n_envases))) + 
  geom_bar(fill = '#d1a949',stat = 'identity') +
    labs(title = 'Nº de envases dipensados por año',
       subtitle = paste0(df_list_indicators_$descr, ' (',df_list_indicators_$indicators,')'),
       y = 'Nº de envases dispensados',
       x = 'Año') +
  theme_minimal() 
    plot <- ggplotly(plot, tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº de envases dispensados por año',
                                    '<br>',
                                    '<sup>',
                                     df_list_indicators_$descr, ' (',df_list_indicators_$indicators,')','</sup>')))
    p[[ind]] <- plot
  
  return(p)
}


plot_n_env <- lapply(df_list_indicators$indicators, plot_nenv_per_year)


```



::: {.panel-tabset}

### Alcaloides naturales del opio (N02AA)

```{r}
#| label: n_env_Alcaloides naturales del opio

plot_n_env[[1]]$N02AA
```

### Derivados de fenilpiperidina (N02AB)

```{r}
#| label: n_env_Derivados de fenilpiperidina
plot_n_env[[2]]$N02AB
```

### Otros opioides (N02AX)

```{r}
#| label: n_env_Otros opioides
plot_n_env[[3]]$N02AX
```

### Opioides en combinación con analgésicos no opioides (N02AJ)

```{r}
#| label: n_env_Opioides en combinación con analgésicos no opioides
plot_n_env[[4]]$N02AJ
```


### Derivados de oripavina (N02AE)

```{r}
#| label: n_env_Derivados de oripavina
plot_n_env[[5]]$N02AE
```

:::



## Evolución temporal del número de envases dispensados de cada ATC dentro de los grupos mayores 
::: {.justify}
Se muestra el número de envases dispensados durante el periodo de estudio para cada grupo de ATC dentro de los grupos mayores.
:::
::: {.callout-tip}
## Nota informativa

Las siguientes figuras que se muestran son interactivas. Colocando el cursor a lo largo de cada una de las series es posible conocer el año y el número de envases correspondiente. Es posible ocultar las distintas series clickando sobre dicha serie en la etiqueta de la leyenda. El eje Y se muestra en **escala logarítmica**.
:::

```{r}
## label: Evolución temporal del número de envases de cada ATC dentro de los grupos mayores


list_atc_4 <- data.frame(codigo = c("N02AA",
             'N02AB',
             'N02AX',
             'N02AJ',
             'N02AE'),
                    descripcion = c("Alcaloides naturales del opio (N02AA)",
             'Derivados de fenilpiperidina (N02AB)',
             'Otros opioides (N02AX)',
             'Opioides en combinación con analgésicos no opioides (N02AJ)',
             'Derivados de oripavina (N02AE)'))
list_atc_7 <- data.frame(codigo = c('N02AA01',
'N02AA03',
'N02AA05',
'N02AA08',
'N02AA55',
'N02AB02',
'N02AB03',
'N02AE01',
'N02AX02',
'N02AX06',
'N02AJ13',
'N02AJ06',
'N02AJ07',
'N02AJ08',
'N02AJ09'),
  descripcion = c('Morfina (N02AA01)',
'Hidromorfona (N02AA03)',
'Oxicodona (N02AA05)',
'Dihidrocodeína (N02AA08)',
'Oxicodona y naloxona (N02AA55)',
'Petidina (N02AB02)',
'Fentanilo (N02AB03)',
'Buprenorfina(N02AE01)',
'Tramadol (N02AX02)',
'Tapentadol (N02AX06)',
'Tramadol y paracetamol (N02AJ13)',
'Codeína y paracetamol (N02AJ06)',
'Codeína y ácido acetilsalicílico (N02AJ07)',
'Codeína e ibuprofeno (N02AJ08)',
'Codeína y otros analgésicos no opiáceos (N02AJ09)'))

evolucion_temporal_envases_atc <- left_join(x=evolucion_temporal_envases_atc, y = list_atc_7, by = c('atc_farmaco_dispensado_short'='codigo'))
evolucion_temporal_envases_atc <- evolucion_temporal_envases_atc %>% filter(!is.na(descripcion))
evolucion_temporal_envases_atc$año_cd <- factor(evolucion_temporal_envases_atc$año_cd)
p <- list()
plot_evo_temp_atc <- function(ind){


    data_filter <- evolucion_temporal_envases_atc %>% filter(grepl(ind, atc_farmaco_dispensado_short))
    if(nrow(data_filter)>0){
    list_atc_4_ <- list_atc_4 %>% filter(codigo %in% ind)
    
    plot <- ggplot(data_filter,aes(x = año_cd, y=n_envases, group = descripcion,  text = paste("Año:", año_cd, "\nNº envases:", n_envases))) + geom_point(aes(color = descripcion),size=0.5) +
  geom_line(aes(color = descripcion)) +
    labs(title = 'Evolución temporal del Nº de envases dispensados por año',
       subtitle = list_atc_4_$descripcion,
       y = 'Nº de envases dispensados',
       x = 'Año',
       color=NULL) +
  theme_minimal_hgrid() +  scale_y_continuous(trans = 'log10') +
      theme(legend.position = 'bottom', legend.text = element_text(size=10))
        plot <- ggplotly(plot, tooltip = 'text') %>% 
  layout(title = list(text = paste0('Nº de envases dispensados por año',
                                    '<br>',
                                    '<sup>',
                                     list_atc_4_$descripcion,'</sup>')),
         legend = list(orientation = "h", y = -0.5)) 
    p[[ind]] <- plot
    }
  return(p)
}


plot_evo_temp_atc_nenv <- lapply(list_atc_4$codigo, plot_evo_temp_atc)
rm(evolucion_temporal_envases_atc)

```

::: {.panel-tabset}

### Alcaloides naturales del opio (N02AA)

```{r}
#| label: evo_temp_atc_nenv_Alcaloides naturales del opio

plot_evo_temp_atc_nenv[[1]]$N02AA
```

### Derivados de fenilpiperidina (N02AB)

```{r}
#| label: evo_temp_atc_nenv_Derivados de fenilpiperidina
plot_evo_temp_atc_nenv[[2]]$N02AB
```

### Otros opioides (N02AX)

```{r}
#| label: evo_temp_atc_nenv_Otros opioides
plot_evo_temp_atc_nenv[[3]]$N02AX
```

### Opioides en combinación con analgésicos no opioides (N02AJ)

```{r}
#| label: evo_temp_atc_nenv_Opioides en combinación con analgésicos no opioides
plot_evo_temp_atc_nenv[[4]]$N02AJ
```

### Derivados de oripavina (N02AE)

```{r}
#| label: evo_temp_atc_nenv_Derivados de oripavina
plot_evo_temp_atc_nenv[[5]]$N02AE
```

:::



## Consumo (DHD) por ZBS en el último año disponible 
::: {.justify}
Se muestra el consumo (DHD) para el grupo mayor N02A por ZBS en el último año disponible, ordenados de menor a mayor y coloreados por quintiles.
:::
::: {.callout-tip}
## Nota informativa

La siguiente figura que se muestra es interactiva. Colocando el cursor sobre cada una de las barras se muestra el nombre de la zona básica de salud y su valor de Consumo (DHD) correspondiente. Es posible ocultar un determinado quintil clickando sobre la etiqueta de la leyenda.
:::

```{r}
#| label: Consumo ZBS total

# pobla_tsi_ <- pobla_tsi %>% filter(año_cd %in% max(consumo_zbs_total$año_cd,na.rm=TRUE)) %>% 
#   group_by(año_cd,zbs_residencia_cd) %>% summarise(n_poblacion = sum(n_poblacion,na.rm=TRUE))
# pobla_tsi_$año_cd <- as.numeric(pobla_tsi_$año_cd)
# 
# consumo_zbs_total_ <- left_join(x=consumo_zbs_total , y = rel_zbs_codatzbs[c('zbs_residencia_cd','n_zbs')], by = c('zbs_residencia_cd'))
# consumo_zbs_total_ <- left_join(x=consumo_zbs_total_, y=pobla_tsi_, by = c('año_cd',"zbs_residencia_cd"))
# consumo_zbs_total_ <- consumo_zbs_total_ %>% group_by(n_zbs,año_cd) %>% summarise(consumo_ddd = sum(consumo_ddd, na.rm=TRUE),
#                                                                                 n_poblacion = sum(n_poblacion,na.rm=TRUE))
# 
# 
# consumo_zbs_total_ <- consumo_zbs_total_ %>% mutate(DHD_milhab=round((1000*consumo_ddd)/(365*n_poblacion),2))


consumo_zbs_total_ <- read.csv('../../outputs/opioides_dhd_mme_pvp_population_values.csv', sep = '|')
consumo_zbs_total_ <- consumo_zbs_total_ %>% filter(year %in% max(year,na.rm=TRUE))
consumo_zbs_total_ <- consumo_zbs_total_ %>% filter(variable %in% 'dhd', indicator %in% 'N02A')
consumo_zbs_total_$DHD_milhab <- round(consumo_zbs_total_$std_value,2)

consumo_zbs_total_$Quintil[consumo_zbs_total_$DHD_milhab <= quantile(consumo_zbs_total_$DHD_milhab, 0.2, na.rm=TRUE)] <- "quintil 1"

consumo_zbs_total_$Quintil[quantile(consumo_zbs_total_$DHD_milhab, 0.2, na.rm=TRUE) < consumo_zbs_total_$DHD_milhab &
             consumo_zbs_total_$DHD_milhab <= quantile(consumo_zbs_total_$DHD_milhab, 0.4, na.rm=TRUE)] <- "quintil 2"

consumo_zbs_total_$Quintil[quantile(consumo_zbs_total_$DHD_milhab, 0.4, na.rm=TRUE) < consumo_zbs_total_$DHD_milhab &
             consumo_zbs_total_$DHD_milhab <= quantile(consumo_zbs_total_$DHD_milhab, 0.6, na.rm=TRUE)] <- "quintil 3"

consumo_zbs_total_$Quintil[quantile(consumo_zbs_total_$DHD_milhab, 0.6, na.rm=TRUE) < consumo_zbs_total_$DHD_milhab &
             consumo_zbs_total_$DHD_milhab <= quantile(consumo_zbs_total_$DHD_milhab, 0.8, na.rm=TRUE)] <- "quintil 4"

consumo_zbs_total_$Quintil[quantile(consumo_zbs_total_$DHD_milhab, 0.8, na.rm=TRUE) < consumo_zbs_total_$DHD_milhab &
             consumo_zbs_total_$DHD_milhab <= quantile(consumo_zbs_total_$DHD_milhab, 1, na.rm=TRUE)] <- "quintil 5"


consumo_zbs_total_ <- consumo_zbs_total_ %>% filter(!is.na(n_zbs))

p <- ggplot(data=consumo_zbs_total_, aes(x=reorder(n_zbs,DHD_milhab, decreasing=FALSE), y = DHD_milhab, fill = Quintil,
                                          text = paste("ZBS:", n_zbs, "\nConsumo (DHD):", DHD_milhab))) +
   geom_bar(width = 0.3, stat="identity") +
       ylab('Consumo (DHD)') +
       xlab('ZBS') +
  scale_fill_manual(name= '',
                      values=c("quintil 1"="#2c7bb6","quintil 2"="#abd9e9",
                              "quintil 3" = "#ffffbf" ,"quintil 4"="#fdae61", 'quintil 5'='#d7191c'), guide = "legend") +
  #geom_vline(data=consumo_zbs_total_, mapping=aes(xintercept=median(DHD_milhab,na.rm = TRUE)), color="black", lty=2) + 
  theme_minimal() +
theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(), plot.title = element_text(hjust = 1.5),
      panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank()) 

ggplotly(p, tooltip = 'text') %>% 
  layout(title =  list(text=paste0('Consumo (DHD) de Zona Básica de Salud por quintiles (',consumo_zbs_total_$year,')',
                                    '<br>',
                                    '<sup>')),
         margin = list(t = 50),
         showlegend = TRUE,
          legend = list(orientation = "h", y = -0.2))
  
rm(consumo_zbs_total)
rm(p)

```


## Distribución del acumulado de DDDs y PVP por ATC (grupo mayor) para todos los años en las ZBS de mayor DHD (mayor quintil de consumo) en el último año disponible
::: {.justify}
```{epoxy}
Se muestra para las ZBS en el quintil de mayor consumo (DHD) en el último año disponible ({unique(consumo_zbs_total_$year)}) la distribución del acumulado de DDDs y PVP por ATC (grupo mayor) para todos los años de la serie. La caja se construye a partir de la distribución de los acumulados por ZBS calculados anualmente (uno por año). Esto permite conocer si aquellas ZBS que en el último año de estudio disponible tienen un mayor consumo presentan variación o estabilidad a lo largo de la serie. 

```

:::
::: {.callout-tip}
## Nota informativa

La siguiente figura que se muestra es interactiva. Colocando el cursor en el interior de la caja se muestra el nombre de la ZBS y el valor de la mediana. Si movemos el cursor sobre la vertical de la caja se muestran el máximo, mínimo, límites superior e inferior de los bigotes, Q1, Q3 y mediana. También es posible visualizar los valores extremos (outliers). 
:::


```{r, warning = FALSE}
#| label: Distribución por ZBS y ATC

df_list_indicators <- data.frame(indicators = c("N02AA",
             'N02AB',
             'N02AX',
             'N02AJ',
             'N02AE'),
                                 descr = c("Alcaloides naturales del opio",
             'Derivados de fenilpiperidina',
             'Otros opioides',
             'Opioides en combinación con analgésicos no opioides',
             'Derivados de oripavina'))



df_names_var_distr_atc <- data.frame(variable = c('consumo_ddd', 'gasto_pvp'),
                              title = c('Acumulado DDD', 'Acumulado PVP en €'))
distri_zbs_atc <- left_join(x = distri_zbs_atc,y = rel_zbs_codatzbs[c('zbs_residencia_cd','n_zbs')], by = c('zbs_residencia_cd'))
p <- list()

consumo_zbs_total_q5 <- consumo_zbs_total_ %>% filter(Quintil %in% 'quintil 5')
rm(consumo_zbs_total_)
f_plot_distr_atc_zbs <- function(var){

  for(ind in df_list_indicators$indicators){
    data_filter <- distri_zbs_atc %>% filter(atc_farmaco_dispensado_short %in% ind)
    data_filter <- data_filter %>% filter(n_zbs %in% consumo_zbs_total_q5$n_zbs)
    if(nrow(data_filter)>0){
    data_filter <- data_filter %>% select(año_cd,zbs_residencia_cd,n_zbs,atc_farmaco_dispensado_short,all_of(var)) %>%
      rename(var = all_of(var))
    
    data_filter <- data_filter %>% group_by(n_zbs) %>% mutate(median = round(median(var, na.rm=TRUE),2))
    df_names_var_distr_atc_ <- df_names_var_distr_atc %>% filter(variable %in% var)
    df_list_indicators_ <- df_list_indicators %>% filter(indicators %in% ind)

    plot <- ggplot(data=data_filter, aes(x=reorder(n_zbs,median, decreasing=FALSE), y=var, color = '#fc8d62', text = paste("ZBS:", n_zbs, "\nMediana acumulado:", median))) +  geom_boxplot() +  geom_point(alpha = 0) +
        ylab('Acumulado') +
          xlab('ZBS') +
        theme_minimal() +
  theme(axis.text.x = element_blank(),axis.ticks.x = element_blank(), legend.position = 'None')

  plot <- ggplotly(plot, tooltip = 'text') %>%
  layout(title = list(text = paste0('Distribución por Zona Básica de Salud del ',df_names_var_distr_atc_$title,
                                    '<br>',
                                    '<sup>')),
         margin = list(t = 50),
         showlegend = FALSE)


    p[[ind]] <- plot
    }
  }
  return(p)
}


plot_distri_atc_zbs <- lapply(df_names_var_distr_atc$variable, f_plot_distr_atc_zbs)
rm(distri_zbs_atc)
```



### Acumulado DDD

::: {.panel-tabset}

#### Alcaloides naturales del opio (N02AA)

```{r}
#| label: Acumulado DDD Alcaloides naturales del opio
plot_distri_atc_zbs[[1]]$N02AA


```

#### Derivados de fenilpiperidina (N02AB)

```{r}
#| label: Acumulado DDD Derivados de fenilpiperidina
plot_distri_atc_zbs[[1]]$N02AB
```

#### Otros opioides (N02AX)

```{r}
#| label: Acumulado DDD Otros opioides
plot_distri_atc_zbs[[1]]$N02AX
```

#### Opioides en combinación con analgésicos no opioides (N02AJ)

```{r}
#| label: Acumulado DDD Opioides en combinación con analgésicos no opioides
plot_distri_atc_zbs[[1]]$N02AJ
```

#### Derivados de oripavina (N02AE)

```{r}
#| label: Acumulado DDD Derivados de oripavina
plot_distri_atc_zbs[[1]]$N02AE
```

:::


### Acumulado PVP

::: {.panel-tabset}

#### Alcaloides naturales del opio (N02AA)

```{r}
#| label: Acumulado PVP Alcaloides naturales del opio
plot_distri_atc_zbs[[2]]$N02AA


```

#### Derivados de fenilpiperidina (N02AB)

```{r}
#| label: Acumulado PVP Derivados de fenilpiperidina
plot_distri_atc_zbs[[2]]$N02AB
```

#### Otros opioides (N02AX)

```{r}
#| label: Acumulado PVP Otros opioides
plot_distri_atc_zbs[[2]]$N02AX
```

#### Opioides en combinación con analgésicos no opioides (N02AJ)

```{r}
#| label: Acumulado PVP Opioides en combinación con analgésicos no opioides
plot_distri_atc_zbs[[2]]$N02AJ
```

#### Derivados de oripavina (N02AE)

```{r}
#| label: Acumulado PVP Derivados de oripavina
plot_distri_atc_zbs[[2]]$N02AE
```

:::



## Evolución temporal del porcentaje de envases dispensados por ATC

::: {.justify}
Se muestra el porcentaje de envases dispensados de cada grupo de opioides respecto al total de envases dispensados para cada año de estudio.
:::

```{r}
#| label: Evolución temporal del porcentaje de envases dispensados por ATC
tabla_envases_año$atc_farmaco_dispensado_short <- factor(tabla_envases_año$atc_farmaco_dispensado_short)
df_ <- tabla_envases_año %>% group_by(año_cd,) %>% 
  mutate(total =(sum(n_envases,na.rm=TRUE))) 
df_ <- df_ %>% mutate(percent_envases = round(100*(n_envases/total),2))
df_ <- df_[order(df_$año_cd,df_$percent_envases, df_$atc_farmaco_dispensado_short),]

plot <- ggplot(df_,
       aes(x = factor(año_cd), stratum = atc_farmaco_dispensado_short, alluvium = atc_farmaco_dispensado_short,
           y = percent_envases,
           fill = atc_farmaco_dispensado_short)) +
  scale_fill_manual(values = c("#66c2a5", "#fc8d62", "#8da0cb", '#e78ac3', '#a6d854')) +
  geom_flow(stat = "alluvium", lode.guidance = "frontback",
            color = "darkgray", width = 0.6) +
  geom_stratum(alpha = .9,width = 0.6, linewidth = 0.1, color = NA)  + 
    geom_text(stat = "stratum", aes(label = percent_envases), size=2.7)+ 
      labs(title = 'Evolución temporal del porcentaje de envases dispensados por ATC',
       y = 'Porcentaje de envases dispensados',
       x = 'Año') +
  theme_minimal() +
  guides(fill=guide_legend(title="ATC fármaco"))


plot
```



## Evolución temporal por categoría TSI

::: {.justify}
Se observa la evolución temporal de las siguientes tres variables según categoría de TSI:

- 0 = "TSI 000 sin aseguramiento", 

- 1 = "TSI 001 farmacia gratuita", 

- 2 = "TSI 002-01 pensionistas tipo i", 

- 3 = "TSI 002-02 pensionistas tipo ii", 

- 4 = "TSI 003 activos tipo i", 

- 5 = "TSI 004 activos tipo ii", 

- 6 = "TSI 005 activos tipo máximo", 

- 7 = "TSI 005-03 pensionistas tipo máximo" y 

- 8 = "TSI 006 mutualistas".
:::

```{r}
#| label: Evolución temporal por categoría TSI
evolucion_temporal_tsi <- evolucion_temporal_tsi %>% filter(!is.na(tsi_cd))
evolucion_temporal_tsi$año_cd <- as.integer(evolucion_temporal_tsi$año_cd)
pobla_tsi_ <- pobla_tsi %>% filter(!is.na(tsi_cd))
pobla_tsi_ <- pobla_tsi_ %>% filter(grupo_edad_cd>=4)
pobla_tsi_ <- pobla_tsi_ %>% group_by(año_cd,tsi_cd) %>% summarise(n_poblacion=sum(n_poblacion,na.rm=TRUE))
pobla_tsi_$año_cd <- as.integer(pobla_tsi_$año_cd)

evolucion_temporal_tsi <- left_join(x=evolucion_temporal_tsi, y=pobla_tsi_, by = c('año_cd','tsi_cd'))

evolucion_temporal_tsi_ <- evolucion_temporal_tsi %>% group_by(año_cd,tsi_cd,atc_farmaco_dispensado_short) %>% 
  summarise(DHD_milhab=round((1000*consumo_ddd)/(365*n_poblacion),2),
         PVP_hab=round((gasto_pvp/n_poblacion),2),
         env_hab = round((n_envases/n_poblacion),2))
evolucion_temporal_tsi_$atc_farmaco_dispensado_short <- factor(evolucion_temporal_tsi_$atc_farmaco_dispensado_short)
evolucion_temporal_tsi_$año_cd <- factor(evolucion_temporal_tsi_$año_cd)

list_tsi <- unique(evolucion_temporal_tsi_$tsi_cd) %>% sort()

df_variables <- data.frame(variables = c('DHD_milhab','PVP_hab','env_hab'),
                           descrip = c('Consumo (DHD)','Gasto (PVP) en € por habitante',
                                       'Nº de envases dispensados por habitante'))

p <-list()
plot_evo_tsi <- function(tsi){
  evolucion_temporal_tsi_filter <- evolucion_temporal_tsi_ %>% filter(tsi_cd %in% tsi)
  for(var in df_variables$variables){
    df_variables_ <- df_variables %>% filter(variables %in% var)
    evolucion_temporal_tsi_filter_ <- evolucion_temporal_tsi_filter %>% dplyr::select(año_cd,tsi_cd,
                                                                                      atc_farmaco_dispensado_short,
                                                                                      all_of(var)) %>% 
      dplyr::rename(var_estudio = var)
  plot <- ggplot(evolucion_temporal_tsi_filter_,
       aes(x = factor(año_cd), stratum = atc_farmaco_dispensado_short, alluvium = atc_farmaco_dispensado_short,
           y = var_estudio,
           fill = atc_farmaco_dispensado_short)) +
  scale_fill_manual(values = c("#66c2a5", "#fc8d62", "#8da0cb", '#e78ac3', '#a6d854')) +
  geom_flow(stat = "alluvium", lode.guidance = "frontback",
            color = "darkgray", width = 0.6) +
  geom_stratum(alpha = .9,width = 0.6, linewidth = 0.1, color = NA)  + 
    geom_text(stat = "stratum", aes(label = var_estudio), size=2.7)+ 
      labs(title = paste0('Evolución temporal de ',df_variables_$descrip,' por ATC'),
       y = df_variables_$descrip,
       x = 'Año') +
  theme_minimal() +
  theme(plot.title = element_text(size=12)) +  
  guides(fill=guide_legend(title="ATC fármaco"))
    p[[var]] <- plot
  
}
  return(p)
}


plot_evo_tsi <- lapply(list_tsi, plot_evo_tsi)

rm(pobla_tsi_)
```


### Consumo (DHD) 


::: {.panel-tabset}
```{r,results='asis',message=FALSE,warning=FALSE, error=FALSE}
#| label: ev_tsi_Consumo DHD

# for (i in 1:length(plot_evo_tsi)){
#   cat("#### Categoría ", list_tsi[i], "\n\n")
# 
#   print(plot_evo_tsi[[i]]$DHD_milhab)
#   cat("\n\n")
# }

iwalk(plot_evo_tsi, ~ {
  cat("## Categoría ", list_tsi[.y], "\n\n")
  print(plot_evo_tsi[[.y]]$DHD_milhab)

  cat('\n\n')

})

```
:::



### Gasto (PVP)

::: {.panel-tabset}
```{r,results='asis',message=FALSE,warning=FALSE, error=FALSE}
#| label: ev_tsi_Gasto PVP

# for (i in 1:length(plot_evo_tsi)){
#   cat("#### Categoría ", list_tsi[i], "\n\n")
# 
#   print(plot_evo_tsi[[i]]$PVP_hab)
#   cat("\n\n")
# }

iwalk(plot_evo_tsi, ~ {
  cat("## Categoría ", list_tsi[.y], "\n\n")
  print(plot_evo_tsi[[.y]]$PVP_hab)

  cat('\n\n')

})


```
:::


### Nº envases dispensados 


::: {.panel-tabset}
```{r,results='asis',message=FALSE,warning=FALSE, error=FALSE}
#| label: ev_tsi_N envases dispensados

# for (i in 1:length(plot_evo_tsi)){
#   cat("#### Categoría ", list_tsi[i], "\n\n")
#  
#   print(plot_evo_tsi[[i]]$env_hab)
#   cat("\n\n")
# }

iwalk(plot_evo_tsi, ~ {
  cat("## Categoría ", list_tsi[.y], "\n\n")
  print(plot_evo_tsi[[.y]]$env_hab)

  cat('\n\n')

})



```
:::

## Evolución de las variaciones por zona básica de salud (ZBS) {#sec-variaciones_zbs}

::: {.justify}

A continuación, se muestra la distribución del consumo (DHD) y el gasto (PVP) estandarizado en cada ZBS (representada cada una como un punto en la gráfica) por grupo de edad y sexo en cada grupo de opioides por año. Se ha realizado una estandarización directa utilizando la población por grupo de edad quinquenal y sexo de cada ZBS y usando la población INE total de España (por grupo de edad quinquenal y sexo) en cada año como población de referencia.

:::

```{r}
#| label: funcion para plotear violines
data <- read.csv('../../outputs/opioides_dhd_mme_pvp_population_values.csv', sep = "|",colClasses=c("codatzbs"="character"))

data <- data %>% filter(indicator %nin% 'N02A')

df_list_indicators <- data.frame(indicators = c('N02AA', 'N02AB', 'N02AX', 'N02AJ','N02AE'),
                                 descr = c('Alcaloides naturales del opio', 'Derivados de fenilpiperidina', 'Otros opioides',
                                           'Opioides en combinación con analgésicos no opioides','Derivados de oripavina'))
list_variables <- c('dhd', 'pvp')


df_names_var_te <- data.frame(variable = c('dhd', 'pvp'),
                              title = c('Consumo (DHD) mg', 'Gasto (PVP) € por habitante'))



# data_csv <- data %>% dplyr::select(te,año,variable,indicator) %>%  group_by(año,variable,indicator) %>% mutate(P50_año = median(te,na.rm=TRUE)) %>% 
#   group_by(variable,indicator) %>% 
#   mutate(P50_total = median(te,na.rm=TRUE)) %>% 
#   dplyr::select(año,variable,indicator,P50_año,P50_total)
# data_csv <- data_csv[!duplicated(data_csv$P50_año),]
# 
# write.table(data_csv,'../../outputs/variaciones_zona_basica_de_salud_intracomunitarias_y_temporal_tabla.csv',row.names = FALSE,sep = '|')
  

p <- list()
plot_te_per_year <- function(var){

  #names_files <- list.files(path="../../outputs", pattern = pattern, full.names=TRUE)
 #for(file in names_files){
  for(ind in df_list_indicators$indicators){
    data_filter <- data %>% filter(variable %in% var, indicator %in% ind)
    df_names_var_te_ <- df_names_var_te %>% filter(variable %in% var)
    df_list_indicators_ <- df_list_indicators %>% filter(indicators %in% ind)
    
    plot <- ggplot(data=data_filter, aes(x=year, y=std_value, group = year)) +
      geom_violin(trim = FALSE, color = 'black', alpha = 0.4) + 
      stat_summary(fun = "median",
               geom = "crossbar", 
               linewidth = 0.3,
               colour = "black") +
      geom_jitter(position=position_jitter(0.25), size=0.3, alpha = 0.7) +
      labs(title = paste0(df_names_var_te_$title),
           subtitle = paste0(df_list_indicators_$descr, ' (',df_list_indicators_$indicators,')'),
           x = 'Año',
           y = df_names_var_te_$title) +
      scale_x_continuous(limits = c(2012, 2023), breaks = seq(2013, 2022, by = 1)) +
      theme_minimal_hgrid() + 
      geom_hline(data=data_filter, mapping=aes(yintercept=median(std_value,na.rm = TRUE)), color="red") +
      geom_text(x=2023, y=max(data_filter$std_value,na.rm=TRUE), label="| P50 (2013-2022)", color = 'red', size=4,hjust=1) + 
      geom_text(x=2023, y=median(data_filter$std_value,na.rm = TRUE), label=paste0('                ',round(median(data_filter$std_value,na.rm = TRUE),2)), color = 'red', size=4) +
      geom_text(x=2022.5, y=max(data_filter$std_value,na.rm=TRUE), label="| P50 año", color = 'black',hjust=1) + 
      coord_flip()
    p[[ind]] <- plot
  }
  return(p)
}


plot_te <- lapply(list_variables, plot_te_per_year)

rm(data)

```


###  Consumo (DHD)

::: {.panel-tabset}

### Alcaloides naturales del opio (N02AA)

```{r}
#| label: Consumo DHD Alcaloides naturales del opio

plot_te[[1]]$N02AA
```

### Derivados de fenilpiperidina (N02AB)

```{r}
#| label: Consumo DHD Derivados de fenilpiperidina
plot_te[[1]]$N02AB
```

### Otros opioides (N02AX)

```{r}
#| label: Consumo DHD Otros opioides
plot_te[[1]]$N02AX
```

### Opioides en combinación con analgésicos no opioides (N02AJ)

```{r}
#| label: Consumo DHD Opioides en combinación con analgésicos no opioides
plot_te[[1]]$N02AJ
```

### Derivados de oripavina (N02AE)

```{r}
#| label: Consumo DHD Derivados de oripavina
plot_te[[1]]$N02AE
```

:::


### Gasto (PVP)

::: {.panel-tabset}

### Alcaloides naturales del opio (N02AA)

```{r}
#| label: Gasto PVP Alcaloides naturales del opio

plot_te[[2]]$N02AA
```

### Derivados de fenilpiperidina (N02AB)

```{r}
#| label: Gasto PVP Derivados de fenilpiperidina
plot_te[[2]]$N02AB
```

### Otros opioides (N02AX)

```{r}
#| label: Gasto PVP Otros opioides
plot_te[[2]]$N02AX
```

### Opioides en combinación con analgésicos no opioides (N02AJ)

```{r}
#| label: Gasto PVP Opioides en combinación con analgésicos no opioides
plot_te[[2]]$N02AJ
```

### Derivados de oripavina (N02AE)

```{r}
#| label: Gasto PVP Derivados de oripavina
plot_te[[2]]$N02AE
```
:::


<br>
<br>
<br>


# Contribuciones

```{r,message=FALSE,warning=FALSE, error=FALSE}
#| label: autores
df_autores <- data.frame(ccaa_st = c('Aragón','Principado de Asturias','Islas Baleares','Cantabria','Cataluña','Canarias','Castilla y León',
                                     'Comunidad Valenciana','Comunidad de Madrid','Comunidad Foral de Navarra','País Vasco','La Rioja',
                                     'Región de Murcia'),
                         ccaa_cd = c('ES24','ES12','ES53','ES13','ES51','ES70','ES41','ES52','ES30','ES22','ES21','ES23','ES62'),
                         autores_st = c('Francisco Estupiñán Romero, Javier González Galindo, Santiago Royo Sierra, Natalia Martínez Lizaga, Miriam Seral Rodríguez, Ramón Launa Garcés, Ester Angulo Pueyo, Manolo Ridao López, Enrique Bernal Delgado','Gracia M Modroño Riaño', 'Eusebi Castaño Riera, María Zaforteza Dezcallar, María Vega Martín Martín','María Ángeles Lumbreras, Flora Pérez Hernández, Óscar Valcuende Mantilla', 'Cristina Colls Guerra, Mireia Espallargues Carreras, Érica Martínez Solanas, Manuel Medina Peralta, Andrea Molina Nadal, Pere Carbonell Puigdollers, Montserrat Vicente Belis', 'Jose Miguel Rodríguez Lugo, Sara Trujillo Alemán', 'Alejandra García Ortíz, Judith Ceruelo Bermejo, Nieves Martín Sobrino, Juan Carlos Solsona Perea', 'Julia Calabuig', 'José Manuel Izquierdo Palomares, Ángel Luis Mataix Sanjuan, María Isabel del Cura González, Tamara Alonso Safont', 'Maite Almirantearena Legaz, Anabel Zaborras Aguado, Javier Gorricho Mendívil', 'Eduardo Millán Ortuondo, Ricardo Samper Ochotorena','Felix Rivera Sanz, Pilar Sáenz Ortiz, Jose María Rodríguez Corral','Carlos Arenas Díaz, Víctor Rausell, José Eduardo Calle Urra, Amaya Jimeno Almazán, Rafael Herrero Delicado, Mariana Tobaruela Soto, María Onteniente Candela'),
                         afiliacion_st = c('Instituto Aragonés de Ciencias de Salud', 'Unidad de Farmacia de Salud. Servicio de Salud del Principado de Asturias','Consejería de Salud y Consumo','Dirección General de Ordenación Sanitaria, Farmacia e Inspección','Agència de Qualitat i Avaluació Sanitàries de Catalunya (AQUAS). Servei Català de la Salut. Consorci Sanitari de Barcelona', 'Servicio de Evaluación de la Calidad Asistencial y Sistemas de Información de la Dirección General de Programas Asistenciales', 'Dirección Técnica de Farmacia. Gerencia Regional de Salud de Castilla y León', 'Conselleria de Sanitat','Gerencia Asistencial de Atención Primaria','Servicio Navarro de Salud - Osasunbidea (SNS-O)','Osakidetza','Rioja Salud','Servicio Murciano de Salud'))

df_autores_local <- df_autores %>% filter(ccaa_cd %in% list_ccaa)

```

```{epoxy}
{df_autores_local$autores_st}, {df_autores_local$afiliacion_st} ({df_autores_local$ccaa_st}).
```

# Reconocimientos

```{epoxy}
Con el reconocimiento expreso a la labor de los/las profesionales de los servicios de farmacia y productos sanitarios de {df_autores_local$ccaa_st}.
```


# Referencias

::: {#refs}
:::
